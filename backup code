import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from flask import Flask, render_template, request

app = Flask(__name__)

# Load datasets
ratings_path = '/Users/np-bri-mbp-01/Downloads/Assignment/ratings.csv'
movies_path = '/Users/np-bri-mbp-01/Downloads/Assignment/movies.csv'
tags_path = '/Users/np-bri-mbp-01/Downloads/Assignment/tags.csv'

ratings = pd.read_csv(ratings_path, nrows=100000)
movies = pd.read_csv(movies_path)
tags = pd.read_csv(tags_path)

# Merge ratings with movies and tags
merged_data = pd.merge(ratings, movies, on='movieId')
merged_data = pd.merge(merged_data, tags, on=['userId', 'movieId'], how='left')

def apply_pca(X):
    pca = PCA(n_components=min(X.shape[1], 2))  # Ensure n_components <= number of features
    X_pca = pca.fit_transform(X)
    return X_pca

def categorize_ratings(rating):
    if rating <= 2.0:
        return 'Low'
    elif rating <= 3.5:
        return 'Medium'
    else:
        return 'High'

merged_data['rating_category'] = merged_data['rating'].apply(categorize_ratings)

X = merged_data[['userId', 'movieId']]
y = merged_data['rating_category']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

def classify_ratings(X_train, X_test, y_train, y_test):
    clf = DecisionTreeClassifier()
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f'Accuracy of Decision Tree Classifier: {accuracy:.2f}')
    return clf

clf = classify_ratings(X_train, X_test, y_train, y_test)

def cluster_users(X, n_clusters=10):
    kmeans = KMeans(n_clusters=n_clusters)
    kmeans.fit(X)
    return kmeans

X_pca = apply_pca(X[['userId', 'movieId']])
kmeans_model = cluster_users(X_pca)

def get_movie_recommendation(movie_title, num_recommendations=8):
    # Search for the movieId based on the movie_title
    movie_id = movies[movies['title'].str.contains(movie_title, case=False, na=False)]['movieId'].values
    if len(movie_id) == 0:
        return f"Movie '{movie_title}' not found in the database."
    
    movie_id = movie_id[0]
    
    # Find similar movies based on tags
    similar_tags = tags[tags['movieId'] == movie_id]['tag'].tolist()
    similar_movies = tags[tags['tag'].isin(similar_tags)]
    
    if similar_movies.empty:
        return f"No similar movies found for '{movie_title}'."
    
    # Get popular movies with similar tags
    popular_movies = similar_movies.groupby('movieId').size().sort_values(ascending=False).head(num_recommendations)
    recommendations = pd.merge(popular_movies.reset_index(), movies, on='movieId')[['title', 'movieId']]
    
    # Provide explanation of recommendations
    recommendations_text = f"Recommendations based on your interest in '{movie_title}':<br>"
    
    # Add explanation for each recommendation
    for i, row in recommendations.iterrows():
        # Extract the movieId for each recommended movie
        recommended_movie_id = row['movieId']
        # Find similar tags for the recommended movie
        recommended_movie_tags = tags[tags['movieId'] == recommended_movie_id]['tag'].tolist()
        # Find common tags with the original movie
        common_tags = list(set(similar_tags).intersection(set(recommended_movie_tags)))[:5]  # Limit to 5 tags
        common_tags_text = ', '.join(common_tags) if common_tags else "No common tags"
        
        recommendations_text += f"{i+1}. {row['title']}<br>"
        recommendations_text += f"Similar tags({common_tags_text})<br><br>"
    
    return recommendations_text


@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        movie_title = request.form['movie_title']
        num_recommendations = int(request.form['num_recommendations'])
        
        recommendations = get_movie_recommendation(movie_title, num_recommendations)
        return render_template('index.html', recommendations=recommendations)
    
    return render_template('index.html', recommendations=None)

if __name__ == "__main__":
    app.run(debug=True)
